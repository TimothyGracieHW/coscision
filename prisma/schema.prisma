// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserLevel {
  Admin
  User
}

model User {
  id       Int        @id @default(autoincrement())
  name     String
  username String     @unique
  password String
  level    UserLevel  @default(User)
  image    String?
  accounts Account[]
  sessions Session[]
  rank_saw rank_saw[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// APPLICATION SCHEMA

enum KostumPreference {
  Game
  Anime
  Vtuber
}

model kostum {
  id         Int              @id @default(autoincrement())
  name       String
  image      String
  link       String
  origin     String
  preference KostumPreference
  kset       Json
  rank_saw   rank_saw[]
  rvalues    rvalues[]
}

model rank_saw {
  user_id   Int
  kostum_id Int
  saw       Decimal
  rank      Int
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  kostum    kostum  @relation(fields: [kostum_id], references: [id], onDelete: Cascade)

  @@unique([user_id, kostum_id])
}

model rvalues {
  kostum_id      Int
  subkriteria_id Int
  kostum         kostum      @relation(fields: [kostum_id], references: [id], onDelete: Cascade)
  subkriteria    subkriteria @relation(fields: [subkriteria_id], references: [id], onDelete: Cascade)

  @@unique([kostum_id, subkriteria_id])
}

enum KriteriaTipe {
  Cost
  Benefit
}

model kriteria {
  id          Int           @id @default(autoincrement())
  name        String
  weight      Int
  ktype       KriteriaTipe
  subkriteria subkriteria[]
}

model subkriteria {
  id          Int    @id @default(autoincrement())
  kriteria_id Int
  name        String
  skvalue     Int

  kriteria kriteria  @relation(fields: [kriteria_id], references: [id], onDelete: Cascade)
  rvalues  rvalues[]
}
